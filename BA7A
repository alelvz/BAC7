The file contains the Python code to solve problem 7A alongside the given input, each code uses Floyd-Warshall Algorithm to calculate the distances.

Dataset given:
32
0->41:12
1->48:5
2->54:6
3->60:12
4->32:11
5->52:14
6->33:15
7->38:14
8->35:15
9->56:9
10->50:8
11->53:6
12->58:15
13->57:5
14->36:10
15->49:12
16->59:9
17->44:11
18->32:14
19->43:13
20->45:12
21->37:13
22->34:15
23->47:7
24->40:6
25->51:15
26->46:12
27->42:10
28->39:14
29->61:9
30->33:6
31->55:6
32->18:14
32->34:13
32->4:11
33->6:15
33->35:14
33->30:6
34->51:12
34->32:13
34->22:15
35->8:15
35->33:14
35->36:8
36->14:10
36->35:8
36->37:5
37->36:5
37->21:13
37->38:10
38->7:14
38->39:14
38->37:10
39->28:14
39->38:14
39->40:11
40->41:5
40->24:6
40->39:11
41->0:12
41->40:5
41->42:12
42->41:12
42->43:8
42->27:10
43->19:13
43->44:12
43->42:8
44->45:15
44->17:11
44->43:12
45->20:12
45->44:15
45->46:13
46->26:12
46->45:13
46->47:9
47->48:12
47->23:7
47->46:9
48->1:5
48->47:12
48->49:11
49->15:12
49->48:11
49->50:13
50->10:8
50->52:14
50->49:13
51->59:13
51->34:12
51->25:15
52->50:14
52->5:14
52->53:11
53->11:6
53->52:11
53->54:7
54->2:6
54->55:9
54->53:7
55->56:10
55->31:6
55->54:9
56->55:10
56->9:9
56->57:11
57->56:11
57->58:6
57->13:5
58->61:13
58->12:15
58->57:6
59->16:9
59->60:7
59->51:13
60->3:12
60->61:5
60->59:7
61->58:13
61->60:5
61->29:9


# Input format: n=integer followed by edges in the format u->v:w
input_str = """n=32
0->32:9
1->41:13
2->48:9
3->53:5
4->60:5
5->51:5
6->46:7
7->40:12
8->43:6
9->44:11
10->55:11
11->52:11
12->59:13
13->32:15
14->49:15
15->54:14
16->50:8
17->33:14
18->39:11
19->47:10
20->45:10
21->37:7
22->56:10
23->58:5
24->57:8
25->34:9
26->36:12
27->42:14
28->38:13
29->61:13
30->35:10
31->45:7
32->13:15
32->33:7
32->0:9
33->17:14
33->32:7
33->34:8
34->25:9
34->33:8
34->35:14
35->30:10
35->34:14
35->36:14
36->37:7
36->26:12
36->35:14
37->38:10
37->21:7
37->36:7
38->39:7
38->28:13
38->37:10
39->18:11
39->38:7
39->40:13
40->41:11
40->7:12
40->39:13
41->1:13
41->40:11
41->42:11
42->27:14
42->41:11
42->43:14
43->44:11
43->8:6
43->42:14
44->9:11
44->52:15
44->43:11
45->20:10
45->46:10
45->31:7
46->45:10
46->47:7
46->6:7
47->19:10
47->46:7
47->48:14
48->2:9
48->49:10
48->47:14
49->50:6
49->14:15
49->48:10
50->16:8
50->51:12
50->49:6
51->5:5
51->50:12
51->53:15
52->44:15
52->11:11
52->57:12
53->54:9
53->3:5
53->51:15
54->55:10
54->53:9
54->15:14
55->10:11
55->54:10
55->56:8
56->55:8
56->58:14
56->22:10
57->24:8
57->61:9
57->52:12
58->59:5
58->56:14
58->23:5
59->58:5
59->12:13
59->60:13
60->59:13
60->4:5
60->61:5
61->29:13
61->57:9
61->60:5"""

# Parse input to extract n and edges
input_lines = input_str.strip().split('\n')
n = int(input_lines[0].split('=')[1])
edges = []

for line in input_lines[1:]:
    u, rest = line.split('->')
    v, w = rest.split(':')
    edges.append((int(u), int(v), int(w)))

# Determine the maximum node index
max_node_index = max(max(u, v) for u, v, w in edges)

# Create a matrix to store the distances between nodes
# Initialize with infinity for unreachable pairs and 0 for the diagonal (node to itself)
distances = [[float('inf')] * (max_node_index + 1) for _ in range(max_node_index + 1)]
for i in range(max_node_index + 1):
    distances[i][i] = 0

# Populate the matrix with edge weights
for u, v, w in edges:
    distances[u][v] = w

# Floyd-Warshall algorithm to calculate distances
for k in range(max_node_index + 1):
    for i in range(max_node_index + 1):
        for j in range(max_node_index + 1):
            if distances[i][j] > distances[i][k] + distances[k][j]:
                distances[i][j] = distances[i][k] + distances[k][j]

# Print the distances between all pairs of nodes
for i in range(n):
    for j in range(n):
        print(distances[i][j], end=' ')
    print()


Output:
0 113 288 241 182 256 307 101 131 147 228 162 203 24 284 241 271 30 87 303 320 66 219 200 171 33 64 125 82 185 48 317 
113 0 201 154 95 169 220 36 44 60 141 75 116 119 197 154 184 111 48 216 233 61 132 113 84 98 73 38 57 98 85 230 
288 201 0 57 116 42 37 211 169 163 82 148 111 294 34 75 33 286 223 33 50 236 89 98 133 273 248 191 232 129 260 47 
241 154 57 0 69 25 76 164 122 116 35 101 64 247 53 28 40 239 176 72 89 189 42 51 86 226 201 144 185 82 213 86 
182 95 116 69 0 84 135 105 63 57 56 42 31 188 112 69 99 180 117 131 148 130 47 28 27 167 142 85 126 23 154 145 
256 169 42 25 84 0 61 179 137 131 50 116 79 262 38 43 25 254 191 57 74 204 57 66 101 241 216 159 200 97 228 71 
307 220 37 76 135 61 0 230 188 182 101 167 130 313 53 94 52 305 242 24 27 255 108 117 152 292 267 210 251 148 279 24 
101 36 211 164 105 179 230 0 54 70 151 85 126 107 207 164 194 99 36 226 243 49 142 123 94 86 61 48 45 108 73 240 
131 44 169 122 63 137 188 54 0 28 109 43 84 137 165 122 152 129 66 184 201 79 100 81 52 116 91 34 75 66 103 198 
147 60 163 116 57 131 182 70 28 0 103 37 78 153 159 116 146 145 82 178 195 95 94 75 46 132 107 50 91 60 119 192 
228 141 82 35 56 50 101 151 109 103 0 88 51 234 78 35 65 226 163 97 114 176 29 38 73 213 188 131 172 69 200 111 
162 75 148 101 42 116 167 85 43 37 88 0 63 168 144 101 131 160 97 163 180 110 79 60 31 147 122 65 106 45 134 177 
203 116 111 64 31 79 130 126 84 78 51 63 0 209 107 64 94 201 138 126 143 151 42 23 48 188 163 106 147 44 175 140 
24 119 294 247 188 262 313 107 137 153 234 168 209 0 290 247 277 36 93 309 326 72 225 206 177 39 70 131 88 191 54 323 
284 197 34 53 112 38 53 207 165 159 78 144 107 290 0 71 29 282 219 49 66 232 85 94 129 269 244 187 228 125 256 63 
241 154 75 28 69 43 94 164 122 116 35 101 64 247 71 0 58 239 176 90 107 189 42 51 86 226 201 144 185 82 213 104 
271 184 33 40 99 25 52 194 152 146 65 131 94 277 29 58 0 269 206 48 65 219 72 81 116 256 231 174 215 112 243 62 
30 111 286 239 180 254 305 99 129 145 226 160 201 36 282 239 269 0 85 301 318 64 217 198 169 31 62 123 80 183 46 315 
87 48 223 176 117 191 242 36 66 82 163 97 138 93 219 176 206 85 0 238 255 35 154 135 106 72 47 60 31 120 59 252 
303 216 33 72 131 57 24 226 184 178 97 163 126 309 49 90 48 301 238 0 37 251 104 113 148 288 263 206 247 144 275 34 
320 233 50 89 148 74 27 243 201 195 114 180 143 326 66 107 65 318 255 37 0 268 121 130 165 305 280 223 264 161 292 17 
66 61 236 189 130 204 255 49 79 95 176 110 151 72 232 189 219 64 35 251 268 0 167 148 119 51 26 73 30 133 38 265 
219 132 89 42 47 57 108 142 100 94 29 79 42 225 85 42 72 217 154 104 121 167 0 29 64 204 179 122 163 60 191 118 
200 113 98 51 28 66 117 123 81 75 38 60 23 206 94 51 81 198 135 113 130 148 29 0 45 185 160 103 144 41 172 127 
171 84 133 86 27 101 152 94 52 46 73 31 48 177 129 86 116 169 106 148 165 119 64 45 0 156 131 74 115 30 143 162 
33 98 273 226 167 241 292 86 116 132 213 147 188 39 269 226 256 31 72 288 305 51 204 185 156 0 49 110 67 170 33 302 
64 73 248 201 142 216 267 61 91 107 188 122 163 70 244 201 231 62 47 263 280 26 179 160 131 49 0 85 42 145 36 277 
125 38 191 144 85 159 210 48 34 50 131 65 106 131 187 144 174 123 60 206 223 73 122 103 74 110 85 0 69 88 97 220 
82 57 232 185 126 200 251 45 75 91 172 106 147 88 228 185 215 80 31 247 264 30 163 144 115 67 42 69 0 129 54 261 
185 98 129 82 23 97 148 108 66 60 69 45 44 191 125 82 112 183 120 144 161 133 60 41 30 170 145 88 129 0 157 158 
48 85 260 213 154 228 279 73 103 119 200 134 175 54 256 213 243 46 59 275 292 38 191 172 143 33 36 97 54 157 0 289 
317 230 47 86 145 71 24 240 198 192 111 177 140 323 63 104 62 315 252 34 17 265 118 127 162 302 277 220 261 158 289 0 
