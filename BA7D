import numpy as np

def UPGMA(D, n):
    #inicializzar:
    name = [i for i in range(0, n)]
    Tree = {i: [i,i,0,0,1] for i in range(n)} ## Inicializa el arbol [nombre nodo,acumulativo,edad, distnacia, #odos internos]
    formato = []  # Creamos una lista vacía para almacenar los valores

    while len(name) > 1 :
        minimo=np.where(D == np.min(D[np.nonzero(D)])) ## minimo[0] es un vector con los indices de la matriz con menor distacia
        ###### Bucscar el minimo y generar el nodo de TREE -------------------------------
        Tree[n] = [[],[],[],[],[]] 
        a = name[minimo[0][0]]
        b = name[minimo[0][1]]
        Tree[n][0] = [a,b] ##########  Nombre del nodo [.,.]
        Tree[n][1] = [Tree[a][1], Tree[b][1]] # Acumulativo [[.,.],[.,.]]
        Tree[n][2] = D[minimo][0]/2 # AGE
        lenght1 = Tree[n][2] - Tree[a][2] # lenght (AGE(C)-AGE(nodo_previo)
        lenght2 = Tree[n][2] - Tree[b][2] # lenght (AGE(C)-AGE(nodo_previo)
        Tree[n][3] = [lenght1, lenght2]
        Tree[n][4] = Tree[a][4] + Tree[b][4]
        # Dentro de tu bucle o proceso donde generas los valores, los agregas a la lista ---------------------------------------
        formato.append(str(n) + "->" + str(a) + ":" + str(f"{lenght1:.3f}"))
        formato.append(str(n) + "->" + str(b) + ":" + str(f"{lenght2:.3f}"))
        formato.append(str(a) + "->" + str(n) + ":" + str(f"{lenght1:.3f}"))
        formato.append(str(b) + "->" + str(n) + ":" + str(f"{lenght2:.3f}"))
        #Promedio de la fila a eliminarse --------------------------------------------------------------------------------------
        fila = [(D[minimo[0]][0] [i] * Tree[a][4] + D[minimo[0]][1][i] * Tree[b][4]) / (Tree[a][4] + Tree[b][4]) for i in range(len(D[minimo[0]][0] ))] # V1 : D[minimo[0]][0] , V2: D[minimo[0]][1]
        if len(name) == 2:  # cuando estes en 2x2, no sacar promedio pondrerado sino solo pormedio 
            fila = np.mean(D[minimo[0]], axis=0) 
        fila = np.delete(fila, minimo[0])
        # Eliminar la fila y columna del minimo en la matrix de distancia, y eliminar el nodo de NAME
        D = np.delete(D, minimo[0], axis=0)
        D = np.delete(D, minimo[0], axis=1)
        name = np.delete(name, minimo[0])
        # Agregar la fila y columna del promedio; y agregar el nodo a NAME
        D = np.vstack((D, fila))
        fila = np.append(fila, 0)
        D=np.column_stack((D, fila))
        name = np.append(name, n)
        n = n+1 # actulizaar para que se genere el siguiente nodo en el arbol
    # Ordenar la lista usando la función personalizada -- ayuda de internet ------------------------------------------------------
    formato.sort(key=lambda x: (int(x.split('->')[0]), float(x.split(':')[1])))
    return D,Tree, name, formato

##################### DATA --- ## Llammar al txt -> datos.txt
with open("datos.txt", "r") as archivo:
    lineas = archivo.read().splitlines()[1:]

D = np.array([list(map(float, linea.split())) for linea in lineas])
n = 21
D, Tree, name, formato = UPGMA(D, n)
for i in formato:
    print(i)
